ymax <- max(c(predictedTotalCases,datasetone$fatalities))
plot(predictedTotalCases,ylim=c(0,1.0),type="l",lty=2,xlab="days",ylab="Fraction of the Total Expected Fatalities",main=mainName)
lines(datasetone$days[c(1:ndays)],datasetone$fatalities[c(1:ndays)],lwd=5)
lines(datasetone$days[c(1:ndays)],10*datasetone$newfatalities[c(1:ndays)],lty=3,lwd=4,col=2)
daycode <- c("Last:","One Week Ago:","Two Weeks Ago:","Three Weeks Ago:")
dc <- 1
endDay <- 0;
for (endDay in c(0,7,14,21,28))
{
ndays <- numdays - endDay
if (ndays > 7)
{
startday <- max(1,ndays - daysWindow)
daysrange <- c(startday:ndays)
pdfestimate <- try(nls(newfatalities ~ logisticpdf(days, ro, to),
data = datasetone[daysrange,],
start=list(ro= smo$coefficients[1,1],to=smo$coefficients[2,1]),
control=list(warnOnly=TRUE)))
if (!inherits(pdfestimate, "try-error"))
{
nsmo <- summary(pdfestimate)
newcases <- logisticpdf(c(1:120),nsmo$coefficients[1,1],nsmo$coefficients[2,1])
lines(10*newcases,lty=6,col=(endDay+7)/7,lwd= 1 + 1*(dc == 1))
dmax <- which.max(newcases)
daystopeak <- nsmo$coefficients[2,1]-numdays;
if (dc == 1)
{
text(dmax+7,10*max(newcases)+0.05,paste("Days to Peak:",sprintf("%3.0f",daystopeak)),cex=0.8)
}
}
}
dc <- dc + 1
}
}
else
{
plot(datasetone$days[c(1:ndays)],datasetone$fatalities[c(1:ndays)],
ylim=c(0,1.0),
type="l",
lty=2,
xlab="days",
ylab="% Fatalities",
main=mainName)
}
legend("topright",
legend = c("Estimated","Observed","New Fatalities","Estimated New","One Week Ago","Two Weeks Ago","Three Weeks Ago","Four Weeks Ago"),
col = c(1,1,2,1,2,3,4,5),
lty = c(2,1,3,6,6,6,6,6),
lwd = c(1,5,4,2,1,1,1,1))
z <- c(0:10)/100;
axis(4, at=10*z,labels=round(z,digits=2),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
mtext("Fraction of New Fatalities", cex=0.5,side=4, line=3, cex.lab=0.3, col="black",las=3)
}
# Chunk 1
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE,comment = "#>")
library(stringr)
logisticcdf <- function(days,ro,to)
{
cdf <- 1.0/(1.0+exp(ro*(days-to)));
return(cdf);
}
logisticpdf <- function(days,ro,to)
{
pdf <- -ro*exp(ro*(days-to))/((1.0+exp(ro*(days-to)))^2);
return(pdf);
}
# Chunk 2: parameters
# The expetec %  of deaths in each country
expectedtotalFatalities = 0.7*0.1*0.01
# The number of observations used for the trends
daysWindow <- 14
currentdate <- "Apri 7:"
# Chunk 3
train <- read.csv("~/GitHub/COVIDTrends/Kaggle/train.csv", stringsAsFactors=FALSE)
train$ProviceCountry <- paste(train$Country_Region,train$Province_State,sep=":")
train[train$Country_Region=="Korea, South","Country_Region"] <- "South Korea"
trainCountry <- train[train$Province_State == "",]
covid19_datapopulation <- read.csv("~/GitHub/COVIDTrends/Kaggle/covid19_data - population.csv", stringsAsFactors=FALSE)
rownames(covid19_datapopulation) <- paste(covid19_datapopulation$Country,":",sep="")
totalPoulation <- as.numeric(str_replace_all(covid19_datapopulation$Population_2020,",",""))
totalUrbanPoulation <- as.numeric(str_replace_all(covid19_datapopulation$Urban_pop_pct,"\\%",""))/100.0
totalUrbanPoulation[is.na(totalUrbanPoulation)] <- 1.0;
totalUrbanPoulation <- totalPoulation*totalUrbanPoulation
covid19_datapopulation$ExpectedFatalities <- expectedtotalFatalities*(
totalUrbanPoulation +
0.1*(totalPoulation-totalUrbanPoulation)
)
trainCountry$PerFatalities <- trainCountry$Fatalities/covid19_datapopulation[trainCountry$Country_Region,"ExpectedFatalities"]
trainCountry <- trainCountry[trainCountry$Fatalities > 0,]
expfatalities <- covid19_datapopulation$ExpectedFatalities/1.0e6
names(expfatalities) <- covid19_datapopulation$Country
expfatalities <- expfatalities[order(-expfatalities)]
plot.new()
op <- par(no.readonly = TRUE)
par(mar=c(8,4,4,4),pty="m")
#barplot(expfatalities[1:30],las=2,cex.names =0.70,cex.axis = 0.60,horiz = TRUE,main="Expected Fatalities",xlab="MIllions")
barplot(expfatalities[1:30],las=2,cex.names =0.70,cex.axis = 0.60,main="Expected Fatalities",ylab="Millions")
par(op)
# Chunk 4
Country_Region <- names(table(trainCountry$Country_Region))
totaldeaths <- numeric()
for (ctr in Country_Region)
{
totaldeaths <- append(totaldeaths,max(trainCountry[trainCountry$Country_Region == ctr,"Fatalities"]))
}
names(totaldeaths) <- Country_Region
totaldeaths <- totaldeaths[order(-totaldeaths)]
plot(trainCountry[trainCountry$Country_Region == names(totaldeaths[1]),"Fatalities"],main="Fatalities",xlab="Days",ylab="Fatalities")
for (ctr in names(totaldeaths[1:25]))
{
linp <- trainCountry[trainCountry$Country_Region == ctr,"Fatalities"]
lines(linp)
text(length(linp)-1,linp[length(linp)],ctr)
}
plot(trainCountry[trainCountry$Country_Region == names(totaldeaths[1]),"PerFatalities"],main="% Fatalities",xlab="Days",ylab=" % Fatalities")
for (ctr in names(totaldeaths[1:25]))
{
linp <- trainCountry[trainCountry$Country_Region == ctr,"PerFatalities"]
lines(linp)
text(length(linp)-1,linp[length(linp)],ctr)
}
totaldeaths  <- totaldeaths[totaldeaths > 100]
# Chunk 1
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE,comment = "#>")
library(stringr)
logisticcdf <- function(days,ro,to)
{
cdf <- 1.0/(1.0+exp(ro*(days-to)));
return(cdf);
}
logisticpdf <- function(days,ro,to)
{
pdf <- -ro*exp(ro*(days-to))/((1.0+exp(ro*(days-to)))^2);
return(pdf);
}
# Chunk 2: parameters
# The expetec %  of deaths in each country
expectedtotalFatalities = 0.7*0.1*0.01
# The number of observations used for the trends
daysWindow <- 14
currentdate <- "Apri 7:"
# Chunk 3
train <- read.csv("~/GitHub/COVIDTrends/Kaggle/train.csv", stringsAsFactors=FALSE)
train$ProviceCountry <- paste(train$Country_Region,train$Province_State,sep=":")
train[train$Country_Region=="Korea, South","Country_Region"] <- "South Korea"
trainCountry <- train[train$Province_State == "",]
covid19_datapopulation <- read.csv("~/GitHub/COVIDTrends/Kaggle/covid19_data - population.csv", stringsAsFactors=FALSE)
rownames(covid19_datapopulation) <- paste(covid19_datapopulation$Country,":",sep="")
totalPoulation <- as.numeric(str_replace_all(covid19_datapopulation$Population_2020,",",""))
totalUrbanPoulation <- as.numeric(str_replace_all(covid19_datapopulation$Urban_pop_pct,"\\%",""))/100.0
totalUrbanPoulation[is.na(totalUrbanPoulation)] <- 1.0;
totalUrbanPoulation <- totalPoulation*totalUrbanPoulation
covid19_datapopulation$ExpectedFatalities <- expectedtotalFatalities*(
totalUrbanPoulation +
0.1*(totalPoulation-totalUrbanPoulation)
)
trainCountry$PerFatalities <- trainCountry$Fatalities/covid19_datapopulation[trainCountry$Country_Region,"ExpectedFatalities"]
trainCountry <- trainCountry[trainCountry$Fatalities > 0,]
expfatalities <- covid19_datapopulation$ExpectedFatalities/1.0e6
names(expfatalities) <- covid19_datapopulation$Country
expfatalities <- expfatalities[order(-expfatalities)]
plot.new()
op <- par(no.readonly = TRUE)
par(mar=c(8,4,4,4),pty="m")
#barplot(expfatalities[1:30],las=2,cex.names =0.70,cex.axis = 0.60,horiz = TRUE,main="Expected Fatalities",xlab="MIllions")
barplot(expfatalities[1:30],las=2,cex.names =0.70,cex.axis = 0.60,main="Expected Fatalities",ylab="Millions")
par(op)
# Chunk 4
Country_Region <- names(table(trainCountry$Country_Region))
totaldeaths <- numeric()
for (ctr in Country_Region)
{
totaldeaths <- append(totaldeaths,max(trainCountry[trainCountry$Country_Region == ctr,"Fatalities"]))
}
names(totaldeaths) <- Country_Region
totaldeaths <- totaldeaths[order(-totaldeaths)]
plot(trainCountry[trainCountry$Country_Region == names(totaldeaths[1]),"Fatalities"],main="Fatalities",xlab="Days",ylab="Fatalities")
for (ctr in names(totaldeaths[1:25]))
{
linp <- trainCountry[trainCountry$Country_Region == ctr,"Fatalities"]
lines(linp)
text(length(linp)-1,linp[length(linp)],ctr)
}
plot(trainCountry[trainCountry$Country_Region == names(totaldeaths[1]),"PerFatalities"],main="% Fatalities",xlab="Days",ylab=" % Fatalities")
for (ctr in names(totaldeaths[1:25]))
{
linp <- trainCountry[trainCountry$Country_Region == ctr,"PerFatalities"]
lines(linp)
text(length(linp)-1,linp[length(linp)],ctr)
}
totaldeaths  <- totaldeaths[totaldeaths > 100]
par(op)
cn = 20
par(mfrow=c(1,1),cex=0.65,mar=c(4,4,4,5))
for (cn in c(1:length(totaldeaths)))
{
endDay <- 0
countryNumber <- cn
mainName <- paste(currentdate,names(totaldeaths[countryNumber]))
datsetone <- trainCountry[trainCountry$Country_Region == names(totaldeaths[countryNumber]),"PerFatalities"]
datsetchange <- c(datsetone[1],datsetone[2:length(datsetone)]-datsetone[1:(length(datsetone)-1)])
lastobs <- length(datsetone)
datsetchange <- 0.35*datsetchange +
0.65*c(datsetone[1],0.5*(datsetone[3:lastobs]-datsetone[1:(length(datsetone)-2)]),datsetchange[lastobs])
datasetone <- as.data.frame(cbind(days=c(1:length(datsetone)),fatalities = datsetone,newfatalities = datsetchange))
numdays <- nrow(datasetone)
ndays <- max(c(numdays - endDay,7))
startday <- max(1,ndays - daysWindow)
daysrange <- c(startday:ndays)
roestimate <- try(nls(fatalities ~ logisticcdf(days, ro, to),
data = datasetone[daysrange,],
start=list(ro= -0.1,to=ndays),
control=list(warnOnly=TRUE)))
if (!inherits(roestimate, "try-error"))
{
smo <- summary(roestimate)
predictedTotalCases <- logisticcdf(c(1:120),smo$coefficients[1,1],smo$coefficients[2,1])
ymax <- max(c(predictedTotalCases,datasetone$fatalities))
plot(predictedTotalCases,ylim=c(0,1.0),type="l",lty=2,xlab="days",ylab="Fraction of the Total Expected Fatalities",main=mainName)
lines(datasetone$days[c(1:ndays)],datasetone$fatalities[c(1:ndays)],lwd=5)
lines(datasetone$days[c(1:ndays)],10*datasetone$newfatalities[c(1:ndays)],lty=3,lwd=4,col=2)
daycode <- c("Last:","One Week Ago:","Two Weeks Ago:","Three Weeks Ago:")
dc <- 1
for (endDay in c(0,7,14,21,28))
{
ndays <- numdays - endDay
if (ndays > 7)
{
startday <- max(1,ndays - daysWindow)
daysrange <- c(startday:ndays)
pdfestimate <- try(nls(newfatalities ~ logisticpdf(days, ro, to),
data = datasetone[daysrange,],
start=list(ro= smo$coefficients[1,1],to=smo$coefficients[2,1]),
control=list(warnOnly=TRUE)))
if (!inherits(pdfestimate, "try-error"))
{
nsmo <- summary(pdfestimate)
newcases <- logisticpdf(c(1:120),nsmo$coefficients[1,1],nsmo$coefficients[2,1])
lines(10*newcases,lty=6,col=(endDay+7)/7,lwd= 1 + 1*(dc == 1))
dmax <- which.max(newcases)
daystopeak <- nsmo$coefficients[2,1]-numdays;
if (dc == 1)
{
text(dmax+7,10*max(newcases)+0.05,paste("Days to Peak:",sprintf("%3.0f",daystopeak)),cex=0.8)
}
}
}
dc <- dc + 1
}
}
else
{
plot(datasetone$days[c(1:ndays)],datasetone$fatalities[c(1:ndays)],
ylim=c(0,1.0),
type="l",
lty=2,
xlab="days",
ylab="% Fatalities",
main=mainName)
}
legend("topright",
legend = c("Estimated","Observed","New Fatalities","Estimated New","One Week Ago","Two Weeks Ago","Three Weeks Ago","Four Weeks Ago"),
col = c(1,1,2,1,2,3,4,5),
lty = c(2,1,3,6,6,6,6,6),
lwd = c(1,5,4,2,1,1,1,1))
z <- c(0:10)/100;
axis(4, at=10*z,labels=round(z,digits=2),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
mtext("Fraction of New Fatalities", cex=0.5,side=4, line=3, cex.lab=0.3, col="black",las=3)
}
# Chunk 1
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE,comment = "#>")
library(stringr)
logisticcdf <- function(days,ro,to)
{
cdf <- 1.0/(1.0+exp(ro*(days-to)));
return(cdf);
}
logisticpdf <- function(days,ro,to)
{
pdf <- -ro*exp(ro*(days-to))/((1.0+exp(ro*(days-to)))^2);
return(pdf);
}
# Chunk 2: parameters
# The expetec %  of deaths in each country
expectedtotalFatalities = 0.7*0.1*0.015
# The number of observations used for the trends
daysWindow <- 14
currentdate <- "April 7:"
# Chunk 3
train <- read.csv("~/GitHub/COVIDTrends/Kaggle/train.csv", stringsAsFactors=FALSE)
train$ProviceCountry <- paste(train$Country_Region,train$Province_State,sep=":")
train[train$Country_Region=="Korea, South","Country_Region"] <- "South Korea"
trainCountry <- train[train$Province_State == "",]
covid19_datapopulation <- read.csv("~/GitHub/COVIDTrends/Kaggle/covid19_data - population.csv", stringsAsFactors=FALSE)
rownames(covid19_datapopulation) <- paste(covid19_datapopulation$Country,":",sep="")
totalPoulation <- as.numeric(str_replace_all(covid19_datapopulation$Population_2020,",",""))
totalUrbanPoulation <- as.numeric(str_replace_all(covid19_datapopulation$Urban_pop_pct,"\\%",""))/100.0
totalUrbanPoulation[is.na(totalUrbanPoulation)] <- 1.0;
totalUrbanPoulation <- totalPoulation*totalUrbanPoulation
covid19_datapopulation$ExpectedFatalities <- expectedtotalFatalities*(
totalUrbanPoulation +
0.1*(totalPoulation-totalUrbanPoulation)
)
trainCountry$PerFatalities <- trainCountry$Fatalities/covid19_datapopulation[trainCountry$Country_Region,"ExpectedFatalities"]
trainCountry <- trainCountry[trainCountry$Fatalities > 0,]
expfatalities <- covid19_datapopulation$ExpectedFatalities/1.0e6
names(expfatalities) <- covid19_datapopulation$Country
expfatalities <- expfatalities[order(-expfatalities)]
plot.new()
op <- par(no.readonly = TRUE)
par(mar=c(8,4,4,4),pty="m")
#barplot(expfatalities[1:30],las=2,cex.names =0.70,cex.axis = 0.60,horiz = TRUE,main="Expected Fatalities",xlab="MIllions")
barplot(expfatalities[1:30],las=2,cex.names =0.70,cex.axis = 0.60,main="Expected Fatalities",ylab="Millions")
par(op)
# Chunk 4
Country_Region <- names(table(trainCountry$Country_Region))
totaldeaths <- numeric()
for (ctr in Country_Region)
{
totaldeaths <- append(totaldeaths,max(trainCountry[trainCountry$Country_Region == ctr,"Fatalities"]))
}
names(totaldeaths) <- Country_Region
totaldeaths <- totaldeaths[order(-totaldeaths)]
plot(trainCountry[trainCountry$Country_Region == names(totaldeaths[1]),"Fatalities"],main="Fatalities",xlab="Days",ylab="Fatalities")
for (ctr in names(totaldeaths[1:25]))
{
linp <- trainCountry[trainCountry$Country_Region == ctr,"Fatalities"]
lines(linp)
text(length(linp)-1,linp[length(linp)],ctr)
}
plot(trainCountry[trainCountry$Country_Region == names(totaldeaths[1]),"PerFatalities"],main="% Fatalities",xlab="Days",ylab=" % Fatalities")
for (ctr in names(totaldeaths[1:25]))
{
linp <- trainCountry[trainCountry$Country_Region == ctr,"PerFatalities"]
lines(linp)
text(length(linp)-1,linp[length(linp)],ctr)
}
totaldeaths  <- totaldeaths[totaldeaths > 100]
cn = 25
endDay <- 0
countryNumber <- cn
mainName <- paste(currentdate,names(totaldeaths[countryNumber]))
datsetone <- trainCountry[trainCountry$Country_Region == names(totaldeaths[countryNumber]),"PerFatalities"]
datsetchange <- c(datsetone[1],datsetone[2:length(datsetone)]-datsetone[1:(length(datsetone)-1)])
lastobs <- length(datsetone)
datsetchange <- 0.35*datsetchange +
0.65*c(datsetone[1],0.5*(datsetone[3:lastobs]-datsetone[1:(length(datsetone)-2)]),datsetchange[lastobs])
datasetone <- as.data.frame(cbind(days=c(1:length(datsetone)),fatalities = datsetone,newfatalities = datsetchange))
numdays <- min(nrow(datasetone),which.max(datasetone$newfatalities)+7)
ndays <- max(c(numdays - endDay,7))
startday <- max(1,ndays - daysWindow)
daysrange <- c(startday:ndays)
roestimate <- try(nls(fatalities ~ logisticcdf(days, ro, to),
data = datasetone[daysrange,],
start=list(ro= -0.1,to=ndays),
control=list(warnOnly=TRUE)))
smo <- summary(roestimate)
predictedTotalCases <- logisticcdf(c(1:120),smo$coefficients[1,1],smo$coefficients[2,1])
predictedTotalCases <- logisticcdf(c(1:120),smo$coefficients[1,1],smo$coefficients[2,1])
ymax <- max(c(predictedTotalCases,datasetone$fatalities))
plot(predictedTotalCases,ylim=c(0,1.0),type="l",lty=2,xlab="days",ylab="Fraction of the Total Expected Fatalities",main=mainName)
predictedTotalCases
View(covid19_datapopulation)
predictedTotalCases*covid19_datapopulation["Mexico","ExpectedFatalities"]
predictedTotalCases[numdays]*covid19_datapopulation["Mexico","ExpectedFatalities"]
predictedTotalCases[numdays+2]*covid19_datapopulation["Mexico","ExpectedFatalities"]
predictedTotalCases[numdays+1]*covid19_datapopulation["Mexico","ExpectedFatalities"]
# Chunk 1
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE,comment = "#>")
library(stringr)
logisticcdf <- function(days,ro,to)
{
cdf <- 1.0/(1.0+exp(ro*(days-to)));
return(cdf);
}
logisticpdf <- function(days,ro,to)
{
pdf <- -ro*exp(ro*(days-to))/((1.0+exp(ro*(days-to)))^2);
return(pdf);
}
# Chunk 2: parameters
# The expetec %  of deaths in each country
expectedtotalFatalities = 0.7*0.1*0.01
# The number of observations used for the trends
daysWindow <- 14
currentdate <- "April 7:"
# Chunk 3
train <- read.csv("~/GitHub/COVIDTrends/Kaggle/train.csv", stringsAsFactors=FALSE)
train$ProviceCountry <- paste(train$Country_Region,train$Province_State,sep=":")
train[train$Country_Region=="Korea, South","Country_Region"] <- "South Korea"
trainCountry <- train[train$Province_State == "",]
covid19_datapopulation <- read.csv("~/GitHub/COVIDTrends/Kaggle/covid19_data - population.csv", stringsAsFactors=FALSE)
rownames(covid19_datapopulation) <- paste(covid19_datapopulation$Country,":",sep="")
totalPoulation <- as.numeric(str_replace_all(covid19_datapopulation$Population_2020,",",""))
totalUrbanPoulation <- as.numeric(str_replace_all(covid19_datapopulation$Urban_pop_pct,"\\%",""))/100.0
totalUrbanPoulation[is.na(totalUrbanPoulation)] <- 1.0;
totalUrbanPoulation <- totalPoulation*totalUrbanPoulation
covid19_datapopulation$ExpectedFatalities <- expectedtotalFatalities*(
totalUrbanPoulation +
0.1*(totalPoulation-totalUrbanPoulation)
)
trainCountry$PerFatalities <- trainCountry$Fatalities/covid19_datapopulation[trainCountry$Country_Region,"ExpectedFatalities"]
trainCountry <- trainCountry[trainCountry$Fatalities > 0,]
expfatalities <- covid19_datapopulation$ExpectedFatalities/1.0e6
names(expfatalities) <- covid19_datapopulation$Country
expfatalities <- expfatalities[order(-expfatalities)]
plot.new()
op <- par(no.readonly = TRUE)
par(mar=c(8,4,4,4),pty="m")
#barplot(expfatalities[1:30],las=2,cex.names =0.70,cex.axis = 0.60,horiz = TRUE,main="Expected Fatalities",xlab="MIllions")
barplot(expfatalities[1:30],las=2,cex.names =0.70,cex.axis = 0.60,main="Expected Fatalities",ylab="Millions")
par(op)
# Chunk 4
Country_Region <- names(table(trainCountry$Country_Region))
totaldeaths <- numeric()
for (ctr in Country_Region)
{
totaldeaths <- append(totaldeaths,max(trainCountry[trainCountry$Country_Region == ctr,"Fatalities"]))
}
names(totaldeaths) <- Country_Region
totaldeaths <- totaldeaths[order(-totaldeaths)]
plot(trainCountry[trainCountry$Country_Region == names(totaldeaths[1]),"Fatalities"],main="Fatalities",xlab="Days",ylab="Fatalities")
for (ctr in names(totaldeaths[1:25]))
{
linp <- trainCountry[trainCountry$Country_Region == ctr,"Fatalities"]
lines(linp)
text(length(linp)-1,linp[length(linp)],ctr)
}
plot(trainCountry[trainCountry$Country_Region == names(totaldeaths[1]),"PerFatalities"],main="% Fatalities",xlab="Days",ylab=" % Fatalities")
for (ctr in names(totaldeaths[1:25]))
{
linp <- trainCountry[trainCountry$Country_Region == ctr,"PerFatalities"]
lines(linp)
text(length(linp)-1,linp[length(linp)],ctr)
}
totaldeaths  <- totaldeaths[totaldeaths > 100]
cn = 25
endDay <- 0
countryNumber <- cn
mainName <- paste(currentdate,names(totaldeaths[countryNumber]))
datsetone <- trainCountry[trainCountry$Country_Region == names(totaldeaths[countryNumber]),"PerFatalities"]
datsetchange <- c(datsetone[1],datsetone[2:length(datsetone)]-datsetone[1:(length(datsetone)-1)])
lastobs <- length(datsetone)
datsetchange <- 0.35*datsetchange +
0.65*c(datsetone[1],0.5*(datsetone[3:lastobs]-datsetone[1:(length(datsetone)-2)]),datsetchange[lastobs])
datasetone <- as.data.frame(cbind(days=c(1:length(datsetone)),fatalities = datsetone,newfatalities = datsetchange))
numdays <- nrow(datasetone)
ndays <- max(c(numdays - endDay,7))
startday <- max(1,ndays - daysWindow)
daysrange <- c(startday:ndays)
roestimate <- try(nls(fatalities ~ logisticcdf(days, ro, to),
data = datasetone[daysrange,],
start=list(ro= -0.1,to=ndays),
control=list(warnOnly=TRUE)))
smo <- summary(roestimate)
predictedTotalCases <- logisticcdf(c(1:120),smo$coefficients[1,1],smo$coefficients[2,1])
predictedTotalCases[numdays+1]*covid19_datapopulation["Mexico","ExpectedFatalities"]
predictedTotalCases[numdays+2]*covid19_datapopulation["Mexico","ExpectedFatalities"]
expectedtotalFatalities = 0.5*0.1*0.05
# The expetec %  of deaths in each country
expectedtotalFatalities = 0.25*0.1*0.05
# The number of observations used for the trends
daysWindow <- 14
currentdate <- "April 7:"
# Chunk 1
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE,comment = "#>")
library(stringr)
logisticcdf <- function(days,ro,to)
{
cdf <- 1.0/(1.0+exp(ro*(days-to)));
return(cdf);
}
logisticpdf <- function(days,ro,to)
{
pdf <- -ro*exp(ro*(days-to))/((1.0+exp(ro*(days-to)))^2);
return(pdf);
}
# Chunk 2: parameters
# The expetec %  of deaths in each country
expectedtotalFatalities = 0.25*0.1*0.05
# The number of observations used for the trends
daysWindow <- 14
currentdate <- "April 7:"
# Chunk 3
train <- read.csv("~/GitHub/COVIDTrends/Kaggle/train.csv", stringsAsFactors=FALSE)
train$ProviceCountry <- paste(train$Country_Region,train$Province_State,sep=":")
train[train$Country_Region=="Korea, South","Country_Region"] <- "South Korea"
trainCountry <- train[train$Province_State == "",]
covid19_datapopulation <- read.csv("~/GitHub/COVIDTrends/Kaggle/covid19_data - population.csv", stringsAsFactors=FALSE)
rownames(covid19_datapopulation) <- paste(covid19_datapopulation$Country,":",sep="")
totalPoulation <- as.numeric(str_replace_all(covid19_datapopulation$Population_2020,",",""))
totalUrbanPoulation <- as.numeric(str_replace_all(covid19_datapopulation$Urban_pop_pct,"\\%",""))/100.0
totalUrbanPoulation[is.na(totalUrbanPoulation)] <- 1.0;
totalUrbanPoulation <- totalPoulation*totalUrbanPoulation
covid19_datapopulation$ExpectedFatalities <- expectedtotalFatalities*(
totalUrbanPoulation +
0.1*(totalPoulation-totalUrbanPoulation)
)
trainCountry$PerFatalities <- trainCountry$Fatalities/covid19_datapopulation[trainCountry$Country_Region,"ExpectedFatalities"]
trainCountry <- trainCountry[trainCountry$Fatalities > 0,]
expfatalities <- covid19_datapopulation$ExpectedFatalities/1.0e6
names(expfatalities) <- covid19_datapopulation$Country
expfatalities <- expfatalities[order(-expfatalities)]
plot.new()
op <- par(no.readonly = TRUE)
par(mar=c(8,4,4,4),pty="m")
#barplot(expfatalities[1:30],las=2,cex.names =0.70,cex.axis = 0.60,horiz = TRUE,main="Expected Fatalities",xlab="MIllions")
barplot(expfatalities[1:30],las=2,cex.names =0.70,cex.axis = 0.60,main="Expected Fatalities",ylab="Millions")
par(op)
expectedtotalFatalities = 0.5*0.1*0.025
