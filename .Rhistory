ylim=c(0,1.0),
type="l",
lty=2,
xlab="days",
ylab="% Fatalities",
main=mainName)
}
thepeakdates <- as.character(thepeakdates)
thepeakdates[1] <- paste("Estimated New Fat.")
thepeakdates[2] <- paste("Optimistic New Fat.")
legend("topright",
legend = c("Total Estimated","Total Observed","New Observed","Flattening Trend","Peaks Estimations",thepeakdates),
col = c(1,1,2,"gray","red",2,"pink",3,4,5,6),
lty = c(2,1,3,3,NA,4,5,6,6,6,6),
lwd = c(1,5,4,3,1,2,1,1,1,1,1),
pch = c(NA,NA,NA,NA,17,NA,NA,NA,NA,NA,NA),
cex=0.75)
z <- c(0:10)/100;
axis(4, at=10*z,labels=round(z,digits=2),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
mtext("New Fatalities as Fraction of Total Expected", cex=0.5,side=4, line=3, cex.lab=0.3, col="black",las=3)
}
# Chunk 1
knitr::opts_chunk$set(collapse = TRUE, error = FALSE, warning = FALSE, message = FALSE,comment = "#>")
library(stringr)
# Chunk 2: parameters
# The expetec %  of deaths in each country
expectedtotalFatalities = 0.30*0.1*0.02
optGain <- 5
# The number of observations used for the trends
daysWindow <- 14
today <- Sys.Date()
currentdate <- paste(as.character(today),":")
# Chunk 3
time_covid19 <- read.csv("~/GitHub/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv", stringsAsFactors=FALSE)
time_covid19[time_covid19$Country.Region=="Korea, South","Country.Region"] <- "South Korea"
time_covid19[time_covid19$Country.Region=="Czechia","Country.Region"] <- "Czech Republic (Czechia)"
time_covid19[time_covid19$Country.Region=="US","Country.Region"] <- "United States"
time_covid19Country <- time_covid19[time_covid19$Province.State == "",]
time_covid19Country$Province.State <- NULL
time_covid19Country$Lat <- NULL
time_covid19Country$Long <- NULL
rownames(time_covid19Country) <- time_covid19Country$Country.Region
time_covid19Country$Country.Region <- NULL
covid19_datapopulation <- read.csv("./Kaggle/covid19_data - population.csv", stringsAsFactors=FALSE)
rownames(covid19_datapopulation) <- paste(covid19_datapopulation$Country,":",sep="")
totalPoulation <- as.numeric(str_replace_all(covid19_datapopulation$Population_2020,",",""))
totalUrbanPoulation <- as.numeric(str_replace_all(covid19_datapopulation$Urban_pop_pct,"\\%",""))/100.0
totalUrbanPoulation[is.na(totalUrbanPoulation)] <- 1.0;
totalUrbanPoulation <- totalPoulation*totalUrbanPoulation
covid19_datapopulation$ExpectedFatalities <- expectedtotalFatalities*(
totalUrbanPoulation +
0.1*(totalPoulation-totalUrbanPoulation)
)
time_covid19CountryPerc <- time_covid19Country
time_covid19CountryPerc <- time_covid19Country/covid19_datapopulation[rownames(time_covid19Country),"ExpectedFatalities"]
expfatalities <- covid19_datapopulation$ExpectedFatalities/1.0e6
names(expfatalities) <- covid19_datapopulation$Country
expfatalities <- expfatalities[order(-expfatalities)]
plot.new()
op <- par(no.readonly = TRUE)
par(mar=c(8,4,4,4),pty="m")
#barplot(expfatalities[1:30],las=2,cex.names =0.70,cex.axis = 0.60,horiz = TRUE,main="Expected Fatalities",xlab="MIllions")
barplot(expfatalities[1:30],las=2,cex.names =0.70,cex.axis = 0.60,main="Expected Fatalities",ylab="Millions")
par(op)
Country.Region <- rownames(time_covid19Country)
totaldeaths <- as.numeric(time_covid19Country[,ncol(time_covid19Country)])
names(totaldeaths) <- Country.Region
totaldeaths <- totaldeaths[order(-totaldeaths)]
ydata <- as.numeric(time_covid19Country[names(totaldeaths[1]),])
ydata <- ydata[ydata > 1e-6]
plot(ydata,main="# Fatalities",xlab="Days",ylab="Fatalities",xlim=c(1,ncol(time_covid19Country)))
text(length(ydata)-1,ydata[length(ydata)],names(totaldeaths[1]))
for (ctr in names(totaldeaths[1:30]))
{
ydata <- as.numeric(time_covid19Country[ctr,])
ydata <- ydata[ydata > 1e-6]
lines(ydata)
text(length(ydata)-1,ydata[length(ydata)],ctr)
}
totaldeaths  <- totaldeaths[!is.na(totaldeaths)]
totaldeaths  <- totaldeaths[totaldeaths > 100]
source('./logfunctions.r')
par(op)
cn = 1
par(mfrow=c(1,1),cex=0.75,mar=c(6,4,4,5))
for (cn in c(1:length(totaldeaths)))
{
thepeakdates <- character(6);
countryNumber <- cn
mainName <- names(totaldeaths[countryNumber])
datsetone <- as.numeric(time_covid19CountryPerc[names(totaldeaths[countryNumber]),])
thedates <- colnames(time_covid19CountryPerc)[datsetone > 0.0]
thedates <- str_replace(thedates,"X","")
thedates <- str_replace_all(thedates,"\\.","/")
thedates <- as.Date(thedates,"%m/%d/%Y")
thedates <- as.Date(str_replace(thedates,"0020-","2020-"))
datsetone <- datsetone[datsetone > 0.0]
datsetchangep <- c(datsetone[1],datsetone[2:length(datsetone)]-datsetone[1:(length(datsetone)-1)])
lastobs <- length(datsetone)
datsetchangen <- c(datsetone[2:length(datsetone)]-datsetone[1:(length(datsetone)-1)],datsetchangep[lastobs])
datsetchange <- 0.5*(datsetchangep + datsetchangen)
datsetchange <- 0.5*datsetchange +
0.5*c(datsetchange[1],0.5*(datsetone[3:lastobs]-datsetone[1:(length(datsetone)-2)]),datsetchange[lastobs])
datasetone <- as.data.frame(cbind(days=c(1:length(datsetone)),fatalities = datsetone,newfatalities = datsetchange))
lastobs <- nrow(datasetone);
numdays <- min(nrow(datasetone),which.max(datasetone$newfatalities)+7)
startday <- max(1,(numdays - daysWindow))
daysrange <- c(startday:(lastobs))
cdffit <- logisitcfit(datasetone[daysrange,],-0.1,numdays,10)
daystopeak <- cdffit$to-lastobs
if (daystopeak <= 1)
{
pstartday <- max(1,lastobs - 1.25*daysWindow)
#    pstartday <- max(1,lastobs - daysWindow)
pdaysrange <- c(pstartday:(lastobs))
cdffit <- logisitcfit(datasetone[pdaysrange,],cdffit$ro,cdffit$to,2,cdffit$adjust)
}
datasetOptimist <- datasetone;
athedates <- thedates[c(1:length(thedates)) %% 7 == 1]
if (!inherits(cdffit, "try-error"))
{
bootest <- bootstraplogisitcfit(datasetone[daysrange,],cdffit)
torange <- quantile(bootest$to,probs = c(0.025,0.5,0.975))
dayloc <- numeric()
maxdayloc <- numeric()
maxloc <- numeric()
predictedTotalCases <- logisticcdf(c(1:120),cdffit$ro,cdffit$to)/cdffit$adjust;
ymax <- max(1,max(predictedTotalCases))
names(predictedTotalCases) <- thedates
plot(predictedTotalCases,
ylim=c(0,ymax),
#         ylim=c(0,0.03),
type="l",
lty=2,
ylab="Fraction of the Total Expected Fatalities",
xaxt="none",
xlab="",
main=mainName)
lines(datasetone$days[c(1:lastobs)],datasetone$fatalities[c(1:lastobs)],lwd=5)
lines(datasetone$days[c(1:lastobs)],10*datasetone$newfatalities[c(1:lastobs)],lty=3,lwd=4,col=2)
predictedTotalNewCases <- logisticpdf(c(1:120),cdffit$ro,cdffit$to)/cdffit$adjust
lines(10*predictedTotalNewCases,lty=4,col="red")
dmax <- which.max(predictedTotalNewCases)
peakloc <- dmax
daystopeak <- cdffit$to-lastobs;
daystopeakrange <- torange-lastobs;
#    if (daystopeak <= 0)
#    {
#      daystopeak <- min(cdffit$to,which.max(datasetone$newfatalities))-lastobs;
#    }
peakdate <- thedates[lastobs] + as.integer(daystopeak+0.5)
text(dmax + 10,0.95,
paste("Days to peak:", sprintf("%4.1f",daystopeakrange[2])),
cex=0.8)
text(dmax + 10,0.90,
sprintf("(%4.1f to %4.1f)",daystopeakrange[1],daystopeakrange[3]),
cex=0.8)
abline(v=dmax,col="red",lty=2)
expfat <- covid19_datapopulation[names(totaldeaths[countryNumber]),"ExpectedFatalities"]*
logisticcdf(10000,cdffit$ro,cdffit$to)/cdffit$adjust;
text(90,0.55,
paste("Current Deaths:", sprintf("%3.0f",max(time_covid19Country[names(totaldeaths[countryNumber]),]))),
cex=0.8)
text(90,0.5,
paste("Total Expected Deaths:", sprintf("%3.0f",expfat)),
cex=0.8)
expfat <- covid19_datapopulation[names(totaldeaths[countryNumber]),"ExpectedFatalities"]*max(predictedTotalNewCases)
expfat <- max(expfat,datsetchange)
text(90,0.45,
paste("Maximum Deaths per Day:", sprintf("%3.0f",expfat)),
cex=0.8)
firstdate <- as.character(format(thedates[lastobs] + as.integer(daystopeakrange[1]+0.5),"%a %b %d, %y"))
finaldate <- as.character(format(thedates[lastobs] + as.integer(daystopeakrange[3]+0.5),"%a %b %d, %y"))
text(90,0.40,
paste("Peak Between:",firstdate,"and",finaldate),
cex=0.8)
dayloc <- lastobs;
if (daystopeak < 0)
{
dayloc <- lastobs + daystopeak;
}
maxdayloc <- cdffit$to;
maxloc <- 10*max(predictedTotalNewCases)
if (numdays ==  lastobs)
{
datasetOptimist <- datasetone;
maxgain <- min(0.9/max(datasetOptimist$fatalities),optGain);
datasetOptimist$fatalities <- maxgain*datasetOptimist$fatalities;
datasetOptimist$newfatalities <- maxgain*datasetOptimist$newfatalities;
cdffit2 <- logisitcfit(datasetOptimist[daysrange,],-0.1,lastobs,10)
if (!inherits(cdffit2, "try-error"))
{
predictedTotalNewCases <- logisticpdf(c(1:120),cdffit2$ro,cdffit2$to)/cdffit2$adjust;
predictedTotalCases <- logisticcdf(c(1:120),cdffit2$ro,cdffit2$to)/cdffit2$adjust;
lines(predictedTotalCases/maxgain,lty=5,lwd=2,col="pink")
expfat <- covid19_datapopulation[names(totaldeaths[countryNumber]),
"ExpectedFatalities"]*
logisticcdf(10000,cdffit2$ro,cdffit2$to)/cdffit2$adjust/maxgain;
text(90,0.35,
paste("Optimistic Deaths:", sprintf("%3.0f",expfat)),
cex=0.8)
lines(10*predictedTotalNewCases/maxgain,lty=5,lwd=2,col="pink")
dmax <- which.max(predictedTotalNewCases)
daystopeak <- cdffit2$to-lastobs;
text(dmax - 12,
0.95,
paste("Optimistic peak:",sprintf("%3.0f",daystopeak)),
cex=0.8,
col="pink")
abline(v=dmax,col="pink")
peakdate <- c(peakdate,thedates[lastobs] + as.integer(daystopeak+0.5))
peakloc <- c(peakloc,dmax)
bootest <- bootstraplogisitcfit(datasetOptimist[daysrange,],cdffit2)
torange <- quantile(bootest$to,probs = c(0.025,0.5,0.975))
daystopeakrange <- torange-lastobs;
firstdate <- as.character(format(thedates[lastobs] + as.integer(daystopeakrange[1]+0.5),"%a %b %d, %y"))
finaldate <- as.character(format(thedates[lastobs] + as.integer(daystopeakrange[3]+0.5),"%a %b %d, %y"))
text(90,0.30,
paste("Peak Between:",firstdate,"and",finaldate),
cex=0.8)
}
}
axis(1,at=c(7*(0:(length(athedates)-1)),lastobs,peakloc),labels=c(athedates,thedates[lastobs],peakdate),las=2,cex.axis=0.75)
thepeakdates <- c(thedates[lastobs],thedates[lastobs])
for (endDay in c(2,3,4,5,6,7,9,12,14,16,18,21,23,25,28))
{
if (daystopeak <= 0 )
{
numdays <- lastobs + daystopeak;
}
else
{
numdays <- lastobs;
}
ndays <- numdays - endDay
if (ndays > 7)
{
startday <- max(1,ndays - daysWindow)
daysrange <- c(startday:ndays)
cdffit <- logisitcfit(datasetone[daysrange,],-0.1,ndays,10)
if (!inherits(cdffit, "try-error"))
{
newcases <- logisticpdf(c(1:120),cdffit$ro,cdffit$to)/cdffit$adjust;
dayloc <- c(dayloc,ndays)
maxdayloc <- c(maxdayloc,cdffit$to)
maxloc <- c(maxloc,10*max(newcases))
if ((endDay %% 7) == 0)
{
thepeakdates <- c(thepeakdates,thedates[numdays] - endDay)
lines(10*newcases,lty=6,col=as.integer((endDay+20)/7),lwd= 1)
}
}
}
}
if (length(dayloc)>5)
{
fit2<-smooth.spline(dayloc,maxloc,nknots=4)
lines(fit2,lty=3,lwd=3,col="gray")
}
points(dayloc,maxloc,col="gray")
points(maxdayloc,rep(0,length(maxdayloc)),
pch = 17,col=c("purple","pink",rep("red",length(maxdayloc)-2)),
cex=c(2.5,2.0,2.0,1.5,1.5,rep(1,length(maxdayloc)-5)))
}
else
{
plot(datasetone$days[c(1:ndays)],datasetone$fatalities[c(1:ndays)],
ylim=c(0,1.0),
type="l",
lty=2,
xlab="days",
ylab="% Fatalities",
main=mainName)
}
thepeakdates <- as.character(thepeakdates)
thepeakdates[1] <- paste("Estimated New Fat.")
thepeakdates[2] <- paste("Optimistic New Fat.")
legend("topright",
legend = c("Total Estimated","Total Observed","New Observed","Flattening Trend","Peaks Estimations",thepeakdates),
col = c(1,1,2,"gray","red",2,"pink",3,4,5,6),
lty = c(2,1,3,3,NA,4,5,6,6,6,6),
lwd = c(1,5,4,3,1,2,1,1,1,1,1),
pch = c(NA,NA,NA,NA,17,NA,NA,NA,NA,NA,NA),
cex=0.75)
z <- c(0:10)/100;
axis(4, at=10*z,labels=round(z,digits=2),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
mtext("New Fatalities as Fraction of Total Expected", cex=0.5,side=4, line=3, cex.lab=0.3, col="black",las=3)
}
source('~/GitHub/COVIDTrends/COVID_Forecasting/logfunctions.r')
source('~/GitHub/COVIDTrends/COVID_Forecasting/logfunctions.r')
bootest <- bootstraplogisitcfit(datasetone[daysrange,],cdffit,n=10)
torange <- quantile(bootest$to,probs = c(0.025,0.5,0.975))
torange
cn = 1
thepeakdates <- character(6);
countryNumber <- cn
mainName <- names(totaldeaths[countryNumber])
datsetone <- as.numeric(time_covid19CountryPerc[names(totaldeaths[countryNumber]),])
thedates <- colnames(time_covid19CountryPerc)[datsetone > 0.0]
thedates <- str_replace(thedates,"X","")
thedates <- str_replace_all(thedates,"\\.","/")
thedates <- as.Date(thedates,"%m/%d/%Y")
thedates <- as.Date(str_replace(thedates,"0020-","2020-"))
datsetone <- datsetone[datsetone > 0.0]
datsetchangep <- c(datsetone[1],datsetone[2:length(datsetone)]-datsetone[1:(length(datsetone)-1)])
lastobs <- length(datsetone)
datsetchangen <- c(datsetone[2:length(datsetone)]-datsetone[1:(length(datsetone)-1)],datsetchangep[lastobs])
datsetchange <- 0.5*(datsetchangep + datsetchangen)
datsetchange <- 0.5*datsetchange +
0.5*c(datsetchange[1],0.5*(datsetone[3:lastobs]-datsetone[1:(length(datsetone)-2)]),datsetchange[lastobs])
datasetone <- as.data.frame(cbind(days=c(1:length(datsetone)),fatalities = datsetone,newfatalities = datsetchange))
lastobs <- nrow(datasetone);
numdays <- min(nrow(datasetone),which.max(datasetone$newfatalities)+7)
startday <- max(1,(numdays - daysWindow))
daysrange <- c(startday:(lastobs))
cdffit <- logisitcfit(datasetone[daysrange,],-0.1,numdays,10)
daystopeak <- cdffit$to-lastobs
if (daystopeak <= 1)
{
pstartday <- max(1,lastobs - 1.25*daysWindow)
#    pstartday <- max(1,lastobs - daysWindow)
pdaysrange <- c(pstartday:(lastobs))
cdffit <- logisitcfit(datasetone[pdaysrange,],cdffit$ro,cdffit$to,2,cdffit$adjust)
}
datasetOptimist <- datasetone;
athedates <- thedates[c(1:length(thedates)) %% 7 == 1]
bootest <- bootstraplogisitcfit(datasetone[daysrange,],cdffit,n=10)
# Chunk 1
knitr::opts_chunk$set(collapse = TRUE, error = FALSE, warning = FALSE, message = FALSE,comment = "#>")
library(stringr)
# Chunk 2: parameters
# The expetec %  of deaths in each country
expectedtotalFatalities = 0.30*0.1*0.02
optGain <- 5
# The number of observations used for the trends
daysWindow <- 14
today <- Sys.Date()
currentdate <- paste(as.character(today),":")
# Chunk 3
time_covid19 <- read.csv("~/GitHub/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv", stringsAsFactors=FALSE)
time_covid19[time_covid19$Country.Region=="Korea, South","Country.Region"] <- "South Korea"
time_covid19[time_covid19$Country.Region=="Czechia","Country.Region"] <- "Czech Republic (Czechia)"
time_covid19[time_covid19$Country.Region=="US","Country.Region"] <- "United States"
time_covid19Country <- time_covid19[time_covid19$Province.State == "",]
time_covid19Country$Province.State <- NULL
time_covid19Country$Lat <- NULL
time_covid19Country$Long <- NULL
rownames(time_covid19Country) <- time_covid19Country$Country.Region
time_covid19Country$Country.Region <- NULL
covid19_datapopulation <- read.csv("./Kaggle/covid19_data - population.csv", stringsAsFactors=FALSE)
rownames(covid19_datapopulation) <- paste(covid19_datapopulation$Country,":",sep="")
totalPoulation <- as.numeric(str_replace_all(covid19_datapopulation$Population_2020,",",""))
totalUrbanPoulation <- as.numeric(str_replace_all(covid19_datapopulation$Urban_pop_pct,"\\%",""))/100.0
totalUrbanPoulation[is.na(totalUrbanPoulation)] <- 1.0;
totalUrbanPoulation <- totalPoulation*totalUrbanPoulation
covid19_datapopulation$ExpectedFatalities <- expectedtotalFatalities*(
totalUrbanPoulation +
0.1*(totalPoulation-totalUrbanPoulation)
)
time_covid19CountryPerc <- time_covid19Country
time_covid19CountryPerc <- time_covid19Country/covid19_datapopulation[rownames(time_covid19Country),"ExpectedFatalities"]
expfatalities <- covid19_datapopulation$ExpectedFatalities/1.0e6
names(expfatalities) <- covid19_datapopulation$Country
expfatalities <- expfatalities[order(-expfatalities)]
plot.new()
op <- par(no.readonly = TRUE)
par(mar=c(8,4,4,4),pty="m")
#barplot(expfatalities[1:30],las=2,cex.names =0.70,cex.axis = 0.60,horiz = TRUE,main="Expected Fatalities",xlab="MIllions")
barplot(expfatalities[1:30],las=2,cex.names =0.70,cex.axis = 0.60,main="Expected Fatalities",ylab="Millions")
par(op)
# Chunk 4
Country.Region <- rownames(time_covid19Country)
totaldeaths <- as.numeric(time_covid19Country[,ncol(time_covid19Country)])
names(totaldeaths) <- Country.Region
totaldeaths <- totaldeaths[order(-totaldeaths)]
ydata <- as.numeric(time_covid19Country[names(totaldeaths[1]),])
ydata <- ydata[ydata > 1e-6]
plot(ydata,main="# Fatalities",xlab="Days",ylab="Fatalities",xlim=c(1,ncol(time_covid19Country)))
text(length(ydata)-1,ydata[length(ydata)],names(totaldeaths[1]))
for (ctr in names(totaldeaths[1:30]))
{
ydata <- as.numeric(time_covid19Country[ctr,])
ydata <- ydata[ydata > 1e-6]
lines(ydata)
text(length(ydata)-1,ydata[length(ydata)],ctr)
}
totaldeaths  <- totaldeaths[!is.na(totaldeaths)]
totaldeaths  <- totaldeaths[totaldeaths > 100]
# Chunk 5
source('./logfunctions.r')
thepeakdates <- character(6);
countryNumber <- cn
mainName <- names(totaldeaths[countryNumber])
datsetone <- as.numeric(time_covid19CountryPerc[names(totaldeaths[countryNumber]),])
thedates <- colnames(time_covid19CountryPerc)[datsetone > 0.0]
thedates <- str_replace(thedates,"X","")
thedates <- str_replace_all(thedates,"\\.","/")
thedates <- as.Date(thedates,"%m/%d/%Y")
thedates <- as.Date(str_replace(thedates,"0020-","2020-"))
datsetone <- datsetone[datsetone > 0.0]
datsetchangep <- c(datsetone[1],datsetone[2:length(datsetone)]-datsetone[1:(length(datsetone)-1)])
lastobs <- length(datsetone)
datsetchangen <- c(datsetone[2:length(datsetone)]-datsetone[1:(length(datsetone)-1)],datsetchangep[lastobs])
datsetchange <- 0.5*(datsetchangep + datsetchangen)
datsetchange <- 0.5*datsetchange +
0.5*c(datsetchange[1],0.5*(datsetone[3:lastobs]-datsetone[1:(length(datsetone)-2)]),datsetchange[lastobs])
datasetone <- as.data.frame(cbind(days=c(1:length(datsetone)),fatalities = datsetone,newfatalities = datsetchange))
lastobs <- nrow(datasetone);
numdays <- min(nrow(datasetone),which.max(datasetone$newfatalities)+7)
startday <- max(1,(numdays - daysWindow))
daysrange <- c(startday:(lastobs))
cdffit <- logisitcfit(datasetone[daysrange,],-0.1,numdays,10)
daystopeak <- cdffit$to-lastobs
if (daystopeak <= 1)
{
pstartday <- max(1,lastobs - 1.25*daysWindow)
#    pstartday <- max(1,lastobs - daysWindow)
pdaysrange <- c(pstartday:(lastobs))
cdffit <- logisitcfit(datasetone[pdaysrange,],cdffit$ro,cdffit$to,2,cdffit$adjust)
}
datasetOptimist <- datasetone;
athedates <- thedates[c(1:length(thedates)) %% 7 == 1]
bootest <- bootstraplogisitcfit(datasetone[daysrange,],cdffit,n=10)
bootest <- bootstraplogisitcfit(datasetone[daysrange,],cdffit,n=1000)
torange <- quantile(bootest$to,probs = c(0.025,0.5,0.975))
torange
datasetOptimist <- datasetone;
maxgain <- min(0.9/max(datasetOptimist$fatalities),optGain);
datasetOptimist$fatalities <- maxgain*datasetOptimist$fatalities;
datasetOptimist$newfatalities <- maxgain*datasetOptimist$newfatalities;
cdffit2 <- logisitcfit(datasetOptimist[daysrange,],-0.1,lastobs,10)
predictedTotalNewCases <- logisticpdf(c(1:120),cdffit2$ro,cdffit2$to)/cdffit2$adjust;
bootest <- bootstraplogisitcfit(datasetOptimist[daysrange,],cdffit2)
torange <- quantile(bootest$to,probs = c(0.025,0.5,0.975))
torange
datasetOptimist <- datasetone;
maxgain <- min(0.9/max(datasetOptimist$fatalities),optGain);
datasetOptimist$fatalities <- maxgain*datasetOptimist$fatalities;
datasetOptimist$newfatalities <- maxgain*datasetOptimist$newfatalities;
cdffit2 <- logisitcfit(datasetOptimist[daysrange,],-0.1,lastobs,10)
bootest <- bootstraplogisitcfit(datasetOptimist[daysrange,],cdffit2)
source('~/GitHub/COVIDTrends/COVID_Forecasting/logfunctions.r')
bootest <- bootstraplogisitcfit(datasetOptimist[daysrange,],cdffit2)
cdffit2
source('~/GitHub/COVIDTrends/COVID_Forecasting/logfunctions.r')
source('~/GitHub/COVIDTrends/COVID_Forecasting/logfunctions.r')
source('~/GitHub/COVIDTrends/COVID_Forecasting/logfunctions.r')
source('~/GitHub/COVIDTrends/COVID_Forecasting/logfunctions.r')
bootest <- bootstraplogisitcfit(datasetOptimist[daysrange,],cdffit2)
source('~/GitHub/COVIDTrends/COVID_Forecasting/logfunctions.r')
bootest <- bootstraplogisitcfit(datasetOptimist[daysrange,],cdffit2)
source('~/GitHub/COVIDTrends/COVID_Forecasting/logfunctions.r')
source('~/GitHub/COVIDTrends/COVID_Forecasting/logfunctions.r')
source('~/GitHub/COVIDTrends/COVID_Forecasting/logfunctions.r')
source('~/GitHub/COVIDTrends/COVID_Forecasting/logfunctions.r')
source('~/GitHub/COVIDTrends/COVID_Forecasting/logfunctions.r')
bootest <- bootstraplogisitcfit(datasetOptimist[daysrange,],cdffit2)
source('~/GitHub/COVIDTrends/COVID_Forecasting/logfunctions.r')
bootest <- bootstraplogisitcfit(datasetOptimist[daysrange,],cdffit2)
torange <- quantile(bootest$to,probs = c(0.025,0.5,0.975))
torange
source('~/GitHub/COVIDTrends/COVID_Forecasting/logfunctions.r')
bootest <- bootstraplogisitcfit(datasetOptimist[daysrange,],cdffit2)
torange <- quantile(bootest$to,probs = c(0.025,0.5,0.975))
daystopeakrange <- torange-lastobs;
daystopeakrange
torange
# Chunk 1
knitr::opts_chunk$set(collapse = TRUE, error = FALSE, warning = FALSE, message = FALSE,comment = "#>")
library(stringr)
# Chunk 2: parameters
# The expetec %  of deaths in each country
expectedtotalFatalities = 0.70*0.1*0.01
optGain <- 5
# The number of observations used for the trends
daysWindow <- 14
today <- Sys.Date()
currentdate <- paste(as.character(today),":")
# Chunk 3
time_covid19 <- read.csv("~/GitHub/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv", stringsAsFactors=FALSE)
time_covid19[time_covid19$Country.Region=="Korea, South","Country.Region"] <- "South Korea"
time_covid19[time_covid19$Country.Region=="Czechia","Country.Region"] <- "Czech Republic (Czechia)"
time_covid19[time_covid19$Country.Region=="US","Country.Region"] <- "United States"
time_covid19Country <- time_covid19[time_covid19$Province.State == "",]
time_covid19Country$Province.State <- NULL
time_covid19Country$Lat <- NULL
time_covid19Country$Long <- NULL
rownames(time_covid19Country) <- time_covid19Country$Country.Region
time_covid19Country$Country.Region <- NULL
covid19_datapopulation <- read.csv("./Kaggle/covid19_data - population.csv", stringsAsFactors=FALSE)
rownames(covid19_datapopulation) <- paste(covid19_datapopulation$Country,":",sep="")
totalPoulation <- as.numeric(str_replace_all(covid19_datapopulation$Population_2020,",",""))
totalUrbanPoulation <- as.numeric(str_replace_all(covid19_datapopulation$Urban_pop_pct,"\\%",""))/100.0
totalUrbanPoulation[is.na(totalUrbanPoulation)] <- 1.0;
totalUrbanPoulation <- totalPoulation*totalUrbanPoulation
covid19_datapopulation$ExpectedFatalities <- expectedtotalFatalities*(
totalUrbanPoulation +
0.3*(totalPoulation-totalUrbanPoulation)
)
time_covid19CountryPerc <- time_covid19Country
time_covid19CountryPerc <- time_covid19Country/covid19_datapopulation[rownames(time_covid19Country),"ExpectedFatalities"]
expfatalities <- covid19_datapopulation$ExpectedFatalities/1.0e6
names(expfatalities) <- covid19_datapopulation$Country
expfatalities <- expfatalities[order(-expfatalities)]
plot.new()
op <- par(no.readonly = TRUE)
par(mar=c(8,4,4,4),pty="m")
#barplot(expfatalities[1:30],las=2,cex.names =0.70,cex.axis = 0.60,horiz = TRUE,main="Expected Fatalities",xlab="MIllions")
barplot(expfatalities[1:30],las=2,cex.names =0.70,cex.axis = 0.60,main="Expected Fatalities",ylab="Millions")
par(op)
